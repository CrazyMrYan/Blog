import{g as n,j as a,D as s,l as t,q as p,f as e}from"./common-daabc399.js";const o='{"title":"搞懂vue-render函数（入门篇）","frontmatter":{"date":"2020-09-07","title":"搞懂vue-render函数（入门篇）","tags":["Vue","Render"],"describe":"快速上手使用render函数"},"headers":[{"level":2,"title":"前言","slug":"前言"},{"level":2,"title":"render 函数是什么","slug":"render-函数是什么"},{"level":2,"title":"render 函数的使用","slug":"render-函数的使用"},{"level":2,"title":"动态接收参数","slug":"动态接收参数"},{"level":2,"title":"createElement 的属性","slug":"createelement-的属性"},{"level":3,"title":"class","slug":"class"},{"level":3,"title":"on","slug":"on"},{"level":2,"title":"vue组件","slug":"vue组件"}],"relativePath":"docs/vue-RenderStudy.md","lastUpdated":1609917422041.874}';var c={};const l=s('<h2 id="前言"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><blockquote><p>render 函数，大部分老油条，应该是比较了解了，但是可能有些初出茅庐的小年轻们，不是很了解，并且严老湿也去网上查阅了一些相关的文章，总结了一下，不够系统，所以今天简单聊一下，循环渐进</p></blockquote><h2 id="render-函数是什么"><a class="header-anchor" href="#render-函数是什么" aria-hidden="true">#</a> render 函数是什么</h2><p>平常我们写 <code>&lt;template&gt;</code> 里面所使用模板HTML语法组建页面的，其实在 <code>vue</code> 中都会编译成 <code>render</code> 函数，因为<code>vue</code> 中采用的是 <code>虚拟DOM</code> 所以拿到template模板时也要转译成 <code>VNode</code>(virtual node 虚拟节点) 函数</p><p><strong>插一嘴 <code>虚拟DOM</code> 与 <code>真实DOM</code> 的区别</strong></p><p><code>虚拟DOM</code>不会进行排版与重绘操作 ，<code>虚拟DOM</code>就是把<code>真实DOM</code>转换为<code>Javascript</code>代码，并且<code>真实DOM</code>频繁操作排版、重绘效率相比<code>虚拟DOM</code> 效率会低很多，比如原生操作真实DOM浏览器会从构建<code>DOM树</code>开始从头到尾执行一遍流程。而<code>虚拟DOM</code>是用<code>Object</code>来代表一颗节点，这个<code>Object</code>叫做<code>VNode</code>，然后使用两个<code>VNode</code>进行对比，根据对比后的结果修改<code>真实DOM</code>。</p><p>浏览器渲染引擎工作流程</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/db83f0af50f441a89656ce6d80e5f342~tplv-k3u1fbpfcp-zoom-1.image" alt="浏览器渲染引擎工作流程"></p><p>虚拟<code>DOM</code> 与<code>VNode</code>又涉及到<code>diff</code>算法，所以我们先暂停这里，开始我们的正文，当然有兴趣的小伙伴们可以去查阅相关资料</p><h2 id="render-函数的使用"><a class="header-anchor" href="#render-函数的使用" aria-hidden="true">#</a> render 函数的使用</h2><p>先看看我们平常vue中的写法</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  \n <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>  \n     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>严老湿<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>  \n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  \n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span> \n</code></pre></div><p>如果使用render函数将是怎样呢？</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  \n    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  \n<span class="token function">        render</span><span class="token punctuation">(</span><span class="token parameter">createElement</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  \n            <span class="token comment">// createElement：  </span>\n            <span class="token comment">// 第一个参数是标签名类型必须是String  </span>\n            <span class="token comment">// 第二个是属性值 我们后面来讲，类型是Object  </span>\n            <span class="token comment">// 第三个是子级虚拟节点 (VNodes) 可以是String|Array  </span>\n            <span class="token keyword">return</span><span class="token function"> createElement</span><span class="token punctuation">(</span><span class="token string">&#39;h1&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">&quot;严老湿&quot;</span><span class="token punctuation">)</span>  \n        <span class="token punctuation">}</span>  \n    <span class="token punctuation">}</span>  \n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>这样我们也是一样的可以实现 template 中的元素</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f7248c7e65e94c51bef035381bb20496~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h2 id="动态接收参数"><a class="header-anchor" href="#动态接收参数" aria-hidden="true">#</a> 动态接收参数</h2><p>修改以下上面的代码，我们再来试试</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  \n    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  \n        props<span class="token operator">:</span><span class="token punctuation">{</span>  \n            tag<span class="token operator">:</span><span class="token punctuation">{</span>  \n                type<span class="token operator">:</span>String<span class="token punctuation">,</span>  \n                required<span class="token operator">:</span> <span class="token boolean">true</span>  \n            <span class="token punctuation">}</span>  \n        <span class="token punctuation">}</span><span class="token punctuation">,</span>  \n<span class="token function">        render</span><span class="token punctuation">(</span><span class="token parameter">createElement</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  \n            <span class="token keyword">return</span><span class="token function"> createElement</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tag<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">&quot;严老湿&quot;</span><span class="token punctuation">)</span>  \n        <span class="token punctuation">}</span>  \n    <span class="token punctuation">}</span>  \n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span> \n</code></pre></div><p>在父组件中传值给子组件动态切换标签</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub-components</span> <span class="token attr-name">tag</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sub-components</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9006b49d0d734a28a604702c893f563d~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>原来可以这样操作，那我们在玩点其他的呗</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  \n    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  \n        props<span class="token operator">:</span> <span class="token punctuation">{</span>  \n            tag<span class="token operator">:</span> <span class="token punctuation">{</span>  \n                type<span class="token operator">:</span> String<span class="token punctuation">,</span>  \n                required<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  \n            <span class="token punctuation">}</span><span class="token punctuation">,</span>  \n            data<span class="token operator">:</span> <span class="token punctuation">{</span>  \n                type<span class="token operator">:</span> Array<span class="token punctuation">,</span>  \n                required<span class="token operator">:</span><span class="token boolean">true</span>  \n            <span class="token punctuation">}</span><span class="token punctuation">,</span>  \n        <span class="token punctuation">}</span><span class="token punctuation">,</span>  \n<span class="token function">        render</span><span class="token punctuation">(</span><span class="token parameter">createElement</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n            <span class="token keyword">return</span><span class="token function"> createElement</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tag<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  \n                <span class="token comment">// 嵌套到 this.tag 元素上  </span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=&gt;</span>  \n<span class="token function">                    createElement</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>item<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  \n                <span class="token punctuation">)</span>  \n            <span class="token punctuation">)</span><span class="token punctuation">;</span>  \n        <span class="token punctuation">}</span><span class="token punctuation">,</span>  \n    <span class="token punctuation">}</span><span class="token punctuation">;</span>  \n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span> \n</code></pre></div><p>父组件传值</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub-components</span> <span class="token attr-name">tag</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ul<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>data<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sub-components</span><span class="token punctuation">&gt;</span></span> \ndata:[\n\t&quot;新冠病毒灭活疫苗首次亮相&quot;,\n\t&quot;辽宁副省长卢柯拿下科学大奖&quot;,\n\t&quot;阚清子说朱一龙神秘&quot;\n] \n</code></pre></div><p>看看效果</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fa0da8aed0664be7a42941dcb2ceeee9~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h2 id="createelement-的属性"><a class="header-anchor" href="#createelement-的属性" aria-hidden="true">#</a> createElement 的属性</h2><p>我们刚刚使用了<code>createElement</code>的第一个和第三个参数</p><p>现在来看看第二个参数，为什么拿到后面来讲了，因为里面的东西比较多</p><p>嗯？重头戏么</p><p>接着来看看就知道啦</p><h3 id="class"><a class="header-anchor" href="#class" aria-hidden="true">#</a> class</h3><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  \n    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  \n        props<span class="token operator">:</span> <span class="token punctuation">{</span>  \n            tag<span class="token operator">:</span> <span class="token punctuation">{</span>  \n                type<span class="token operator">:</span> String<span class="token punctuation">,</span>  \n                required<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  \n            <span class="token punctuation">}</span><span class="token punctuation">,</span>  \n            data<span class="token operator">:</span> <span class="token punctuation">{</span>  \n                type<span class="token operator">:</span> Array<span class="token punctuation">,</span>  \n                required<span class="token operator">:</span><span class="token boolean">true</span>  \n            <span class="token punctuation">}</span><span class="token punctuation">,</span>  \n        <span class="token punctuation">}</span><span class="token punctuation">,</span>  \n<span class="token function">        render</span><span class="token punctuation">(</span><span class="token parameter">createElement</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n            <span class="token keyword">return</span><span class="token function"> createElement</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tag<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   \n                <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=&gt;</span>  \n<span class="token function">                    createElement</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>  \n                     <span class="token comment">// 首先上场的是class  </span>\n                        <span class="token keyword">class</span><span class="token operator">:</span><span class="token string">&#39;child-element&#39;</span>  \n                     <span class="token comment">// or  </span>\n                     <span class="token comment">// domProps: {className: &quot;child-element&quot;},  </span>\n                    <span class="token punctuation">}</span><span class="token punctuation">,</span>item<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  \n                <span class="token punctuation">)</span>  \n            <span class="token punctuation">)</span><span class="token punctuation">;</span>  \n        <span class="token punctuation">}</span><span class="token punctuation">,</span>  \n    <span class="token punctuation">}</span><span class="token punctuation">;</span>  \n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>  \n</code></pre></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0cc9e1f27a464532a99e0804788a4258~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>我们给<code>li</code> 标签加上了class之后，可以直接在元素上看到 <code>child-element</code> ,然后想修改样式的呢，直接通过选择器修改就好了，这就不用多说了吧！</p><h3 id="on"><a class="header-anchor" href="#on" aria-hidden="true">#</a> on</h3><p>再来看看事件系列</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  \n    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  \n        props<span class="token operator">:</span> <span class="token punctuation">{</span>  \n            tag<span class="token operator">:</span> <span class="token punctuation">{</span>  \n                type<span class="token operator">:</span> String<span class="token punctuation">,</span>  \n                required<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  \n            <span class="token punctuation">}</span><span class="token punctuation">,</span>  \n            data<span class="token operator">:</span> <span class="token punctuation">{</span>  \n                type<span class="token operator">:</span> Array<span class="token punctuation">,</span>  \n                required<span class="token operator">:</span><span class="token boolean">true</span>  \n            <span class="token punctuation">}</span><span class="token punctuation">,</span>  \n        <span class="token punctuation">}</span><span class="token punctuation">,</span>  \n<span class="token function">        render</span><span class="token punctuation">(</span><span class="token parameter">createElement</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n            <span class="token keyword">return</span><span class="token function"> createElement</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tag<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   \n                <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=&gt;</span>  \n<span class="token function">                    createElement</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>  \n                        domProps<span class="token operator">:</span> <span class="token punctuation">{</span>  \n                            className<span class="token operator">:</span> <span class="token string">&quot;child-element&quot;</span>  \n                        <span class="token punctuation">}</span><span class="token punctuation">,</span>  \n                     <span class="token comment">// 在on中我们可以写需要的事件  </span>\n                        on<span class="token operator">:</span><span class="token punctuation">{</span>  \n                            <span class="token comment">// 点击事件 点击打印 Pointer Event  </span>\n<span class="token function-variable function">                            click</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>  \n                                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>  \n                            <span class="token punctuation">}</span><span class="token punctuation">,</span>  \n                            <span class="token comment">// mouseover  </span>\n        \t\t\t\t\t<span class="token comment">// mouseout  </span>\n                        <span class="token punctuation">}</span>  \n                    <span class="token punctuation">}</span><span class="token punctuation">,</span>item<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  \n                <span class="token punctuation">)</span>  \n            <span class="token punctuation">)</span><span class="token punctuation">;</span>  \n        <span class="token punctuation">}</span><span class="token punctuation">,</span>  \n    <span class="token punctuation">}</span><span class="token punctuation">;</span>  \n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>  \n</code></pre></div><p>打印结果：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2b0b8f8454a74c588fb3a32ed387d543~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>里面还有很多好玩的东西可以去看看 <code>vue2.0</code> 官方文档</p><p><a href="https://cn.vuejs.org/v2/guide/render-function.html#createElement-%E5%8F%82%E6%95%B0" target="_blank" rel="noopener noreferrer">https://cn.vuejs.org/v2/guide/render-function.html#createElement-参数</a></p><p>如 ：<code>style</code> 、 <code>attrs</code> 、<code>directives</code> 等等....</p><h2 id="vue组件"><a class="header-anchor" href="#vue组件" aria-hidden="true">#</a> vue组件</h2><p>如果看过 render 源码的同学应该知道，我们刚刚所说的第一个参数 <code>tag</code> 不仅仅可以是标准的html标签。<code>tag</code> 可以分为正常html标签 | vue组件 两类 。之前已经学了html标签，接下来 我们来看看vue组件</p><p>首先我们新建一个 vue 组件</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  \n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>  \n        {{content}}  \n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  \n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>  \n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  \n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  \n    props<span class="token operator">:</span><span class="token punctuation">{</span>  \n        content<span class="token operator">:</span><span class="token punctuation">{</span>  \n            type<span class="token operator">:</span>String  \n        <span class="token punctuation">}</span>  \n    <span class="token punctuation">}</span>  \n<span class="token punctuation">}</span>  \n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span> \n</code></pre></div><p>在render函数页面中引入</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  \n    <span class="token comment">// 引入组件  </span>\n    <span class="token keyword">import</span> Widget <span class="token keyword">from</span> <span class="token string">&#39;./Widget&#39;</span>  \n    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  \n<span class="token function">        render</span><span class="token punctuation">(</span><span class="token parameter">createElement</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n            <span class="token comment">// 传入组件  </span>\n            <span class="token keyword">return</span><span class="token function"> createElement</span><span class="token punctuation">(</span>Widget<span class="token punctuation">,</span> <span class="token punctuation">{</span>  \n                <span class="token comment">// 传值 content  </span>\n                props<span class="token operator">:</span><span class="token punctuation">{</span>  \n                    content<span class="token operator">:</span><span class="token string">&quot;hello CrazyYan&quot;</span>  \n                <span class="token punctuation">}</span>  \n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \n        <span class="token punctuation">}</span><span class="token punctuation">,</span>  \n    <span class="token punctuation">}</span><span class="token punctuation">;</span>  \n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>ok 返回到页面上，我们已经看到了组件</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/94e77b99098e4caaa39a86cddd24e630~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>我们学到这里，应该知道</p><ul><li>render函数的作用</li><li>它的简单使用方法</li><li>几个参数的作用</li></ul>',55),u=t("下次我们会讲到 如何手动写一个 简易版 "),k=a("code",null,"render",-1);c.render=function(s,t,o,c,i,r){const d=p("Comment");return e(),n("div",null,[l,a("p",null,[u,k,a(d)])])};export default c;export{o as __pageData};
